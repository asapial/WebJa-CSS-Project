### Definition
The `display` CSS property specifies the display behavior (the type of rendering box) of an element.

### Values

| Value              | Description                                                                 |
|--------------------|-----------------------------------------------------------------------------|
| `none`             | The element is not displayed.                                               |
| `block`            | The element is displayed as a block element.                                |
| `inline`           | The element is displayed as an inline element.                              |
| `inline-block`     | The element is displayed as an inline-level block container.                |
| `flex`             | The element is displayed as a block-level flex container.                   |
| `inline-flex`      | The element is displayed as an inline-level flex container.                 |
| `grid`             | The element is displayed as a block-level grid container.                   |
| `inline-grid`      | The element is displayed as an inline-level grid container.                 |
| `table`            | The element is displayed as a table.                                        |
| `inline-table`     | The element is displayed as an inline-level table.                          |
| `list-item`        | The element is displayed as a list item.                                    |
| `inherit`          | Inherits the `display` property from its parent.                            |
| `initial`          | Sets the property to its default value.                                     |
| `revert`           | Resets the property to the value established by the user-agent stylesheet.  |
| `revert-layer`     | Resets the property to the value established by the user-agent stylesheet, including any changes by the `@import` rule. |
| `unset`            | Resets the property to its inherited value if it inherits from its parent, otherwise sets it to its initial value. |

### Example
```css
/* Example */
.element-none {
  display: none; /* Element is not displayed */
}

.element-block {
  display: block; /* Element is displayed as a block element */
}

.element-inline {
  display: inline; /* Element is displayed as an inline element */
}

.element-inline-block {
  display: inline-block; /* Element is displayed as an inline-level block container */
}

.element-flex {
  display: flex; /* Element is displayed as a block-level flex container */
}

.element-inline-flex {
  display: inline-flex; /* Element is displayed as an inline-level flex container */
}

.element-grid {
  display: grid; /* Element is displayed as a block-level grid container */
}

.element-inline-grid {
  display: inline-grid; /* Element is displayed as an inline-level grid container */
}

.element-table {
  display: table; /* Element is displayed as a table */
}

.element-inline-table {
  display: inline-table; /* Element is displayed as an inline-level table */
}

.element-list-item {
  display: list-item; /* Element is displayed as a list item */
}

.element-inherit {
  display: inherit; /* Inherits the display property from its parent */
}

.element-initial {
  display: initial; /* Sets the property to its default value */
}

.element-revert {
  display: revert; /* Resets the property to the value established by the user-agent stylesheet */
}

.element-revert-layer {
  display: revert-layer; /* Resets the property to the value established by the user-agent stylesheet, including any changes by the @import rule */
}

.element-unset {
  display: unset; /* Resets the property to its inherited value if it inherits from its parent, otherwise sets it to its initial value */
}
```

### Description
The `display` property determines how an element is displayed in the document. It can define an element as a block, inline, flex, grid, table, or list item. This property is crucial for controlling the layout and structure of web pages. It can be used to show or hide elements, change the flow of elements, and structure elements into complex layouts using flex or grid displays.

- **Default Value**: `inline`
- **Applies to**: All elements
- **Inherited**: No
- **Animatable**: No
- **Media**: Visual
- **Computed Value**: As specified

### All Most Simillar Properties

| Property       | Description                                               | Difference                                               |
|----------------|-----------------------------------------------------------|----------------------------------------------------------|
| `visibility`   | Controls the visibility of an element.                    | `visibility` hides elements but still occupies space.    |
| `position`     | Specifies the positioning method for an element.          | `position` affects the element's placement but not display type. |

### Browser Compatibility

| Browser            | Support |
|--------------------|---------|
| Chrome             | Yes     |
| Firefox            | Yes     |
| Safari             | Yes     |
| Edge               | Yes     |
| Internet Explorer  | Yes     |
| Opera              | Yes     |
| Mobile Browsers    | Yes     |

### In JavaScript
```javascript
// In JavaScript
document.getElementById("myElement").style.display = "flex"; // Example of setting display to 'flex'
```

### Example Code
```html
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <style>
        body {
            display: flex;
            justify-content: center;
            align-items: center;
            height: 100vh;
            background-color: #f8f8f8;
            margin: 0;
        }
        .main-container {
            background-color: #fff;
            border-radius: 20px;
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
            width: 80%;
            padding: 20px;
            text-align: center;
        }
        .sub-container {
            width: 80%;
            margin: 10px auto;
            padding: 20px;
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
            border-radius: 20px;
            background-color: #dcdbdb;
            margin-bottom: 30px;
        }
        .box {
            width: 50px;
            height: 50px;
            background-color: #4CAF50;
            margin: 10px;
            border-radius: 10px;
        }
        .inline .box {
            display: inline-block;
        }
        .block .box {
            display: block;
        }
        .flex {
            display: flex;
            justify-content: space-around;
            flex-wrap: wrap;
        }
        .flex .box {
            display: block;
        }
        .grid {
            display: grid;
            grid-template-columns: repeat(2, 1fr);
            gap: 10px;
        }
        .grid .box {
            display: block;
        }
        .none .box {
            display: none;
        }
    </style>
</head>
<body>
    <div class="main-container">
        <h1>display Property Values</h1>
        <div class="sub-container block">
            <h2>block</h2>
            <div class="box"></div>
            <div class="box"></div>
            <div class="box"></div>
            <div class="box"></div>
        </div>
        <div class="sub-container inline">
            <h2>inline</h2>
            <div class="box"></div>
            <div class="box"></div>
            <div class="box"></div>
            <div class="box"></div>
        </div>
        <div class="sub-container flex">
            <h2>flex</h2>
            <div class="box"></div>
            <div class="box"></div>
            <div class="box"></div>
            <div class="box"></div>
        </div>
        <div class="sub-container grid">
            <h2>grid</h2>
            <div class="box"></div>
            <div class="box"></div>
            <div class="box"></div>
            <div class="box"></div>
        </div>
        <div class="sub-container none">
            <h2>none</h2>
            <div class="box"></div>
            <div class="box"></div>
            <div class="box"></div>
            <div class="box"></div>
        </div>
    </div>
</body>
</html>

```