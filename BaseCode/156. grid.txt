## Definition
The `grid` property is a shorthand for setting all of the following properties in a grid container:
- `grid-template-rows`
- `grid-template-columns`
- `grid-template-areas`
- `grid-auto-rows`
- `grid-auto-columns`
- `grid-auto-flow`
- `grid-gap` (now `gap`)

## Values

| Value                           | Description                                                                             |
|---------------------------------|-----------------------------------------------------------------------------------------|
| `none`                          | The element will not be a grid container.                                               |
| `<grid-template-rows> / <grid-template-columns>` | Defines the rows and columns of the grid.                                      |
| `<grid-template-areas>`         | Defines a grid with named areas.                                                        |
| `<grid-auto-rows> / <grid-auto-columns>` | Defines the size of implicitly created grid rows and columns.                   |
| `<grid-auto-flow>`              | Controls how auto-placed items are inserted in the grid.                                |
| `<gap>`                         | Sets the gaps (gutters) between rows and columns.                                        |

## Example
```css
.container {
    display: grid;
    grid-template-rows: 100px 200px; /* Defines two rows: first is 100px, second is 200px */
    grid-template-columns: 1fr 2fr; /* Defines two columns: first takes 1 fraction, second takes 2 fractions */
    grid-template-areas: 
        "header header"
        "sidebar main"; /* Defines named areas for grid layout */
    grid-gap: 10px; /* Defines the gap between grid items */
}
```

## Description
The `grid` property in CSS is used to create complex grid layouts with a flexible and efficient method. It is a shorthand property for setting multiple grid-related properties. By using `grid`, you can define the layout structure in a concise manner, specifying the rows, columns, gaps, and named areas within the grid container.

## All Most Similar Properties

| Property               | Description                                               | Difference                                                 |
|------------------------|-----------------------------------------------------------|------------------------------------------------------------|
| `grid-template-rows`   | Defines the number and size of rows in a grid container.  | Only sets rows, not columns, areas, or gaps.               |
| `grid-template-columns`| Defines the number and size of columns in a grid container.| Only sets columns, not rows, areas, or gaps.              |
| `grid-template-areas`  | Defines named grid areas.                                 | Only sets named areas, not rows, columns, or gaps.         |
| `gap`                  | Sets the gap between rows and columns.                    | Only sets gaps, not rows, columns, or named areas.         |

## Browser Compatibility

| Browser             | Support      |
|---------------------|--------------|
| Chrome              | Yes          |
| Firefox             | Yes          |
| Safari              | Yes          |
| Edge                | Yes          |
| Internet Explorer   | Partial      |

## In JavaScript
```javascript
// Example of using the grid property in JavaScript
const container = document.querySelector('.container');
container.style.display = 'grid';
container.style.gridTemplateRows = '100px 200px';
container.style.gridTemplateColumns = '1fr 2fr';
container.style.gridTemplateAreas = `
    "header header"
    "sidebar main"
`;
container.style.gap = '10px';
```

## Example Code
```html
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Grid Example</title>
    <style>
        body {
            display: flex;
            justify-content: center;
            align-items: center;
            height: 100vh;
            background-color: #f8f9fa;
            margin: 0;
        }
        .container {
            width: 80%;
            border-radius: 20px;
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
            background-color: white;
            padding: 20px;
            text-align: center;
        }
        .sub-container {
            width: 80%;
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.555);
            border-radius: 20px;
            background-color: #dcdbdb;
            margin: 20px auto;
            padding: 20px;
        }
        h2 {
            margin-bottom: 10px;
        }
        .grid-container {
            display: grid;
            grid-template-rows: 100px 200px;
            grid-template-columns: 1fr 2fr;
            grid-template-areas: 
                "header header"
                "sidebar main";
            gap: 10px;
        }
        .header {
            grid-area: header;
            background-color: #61dafb;
            padding: 20px;
            border-radius: 10px;
        }
        .sidebar {
            grid-area: sidebar;
            background-color: #ffb6c1;
            padding: 20px;
            border-radius: 10px;
        }
        .main {
            grid-area: main;
            background-color: #98fb98;
            padding: 20px;
            border-radius: 10px;
        }
    </style>
</head>
<body>
    <div class="container">
        <h1>grid Values</h1>
        <div class="sub-container">
            <h2>Grid Layout Example</h2>
            <div class="grid-container">
                <div class="header">Header</div>
                <div class="sidebar">Sidebar</div>
                <div class="main">Main Content</div>
            </div>
        </div>
    </div>
</body>
</html>
```